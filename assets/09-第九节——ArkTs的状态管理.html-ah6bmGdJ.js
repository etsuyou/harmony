import{_ as a,c as e,o as s,a as n}from"./app-BgCKDSPR.js";const l={},t=n('<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p>在声明式UI编程框架中，UI是程序状态的运行结果，用户构建了一个UI模型，其中应用的运行时的状态是参数。当参数改变时，UI作为返回结果，也将进行对应的改变。这些运行时的状态变化所带来的UI的重新渲染，在ArkUI中统称为状态管理机制。</p><ul><li>View(UI)：UI渲染，一般指自定义组件的build方法和@Builder装饰的方法内的UI描述。</li><li>State：状态，一般指的是装饰器装饰的数据。用户通过触发组件的事件方法，改变状态数据。状态数据的改变，引起UI的重新渲染</li></ul><h2 id="二、如何定义状态" tabindex="-1"><a class="header-anchor" href="#二、如何定义状态"><span>二、如何定义状态</span></a></h2><blockquote><p>ArkUI提供了多种装饰器，通过使用这些装饰器可以定义状态。状态变量不仅可以观察在组件内的改变，还可以在不同组件层级间传递，比如父子组件、跨组件层级，也可以观察全局范围内的变化。</p></blockquote><h3 id="根据状态变量的影响范围对装饰器进行分类" tabindex="-1"><a class="header-anchor" href="#根据状态变量的影响范围对装饰器进行分类"><span>根据状态变量的影响范围对装饰器进行分类</span></a></h3><h4 id="管理组件拥有状态的装饰器" tabindex="-1"><a class="header-anchor" href="#管理组件拥有状态的装饰器"><span>管理组件拥有状态的装饰器</span></a></h4><p>组件级别的状态管理，可以观察组件内变化，和不同组件层级的变化，但需要唯一观察同一个组件树上，即同一个页面内。</p><h4 id="管理应用拥有状态的装饰器" tabindex="-1"><a class="header-anchor" href="#管理应用拥有状态的装饰器"><span>管理应用拥有状态的装饰器</span></a></h4><p>应用级别的状态管理，可以观察不同页面，甚至不同UIAbility的状态变化，是应用内全局的状态管理</p><h3 id="从数据的传递形式和同步类型层面进行分类" tabindex="-1"><a class="header-anchor" href="#从数据的传递形式和同步类型层面进行分类"><span>从数据的传递形式和同步类型层面进行分类：</span></a></h3><h4 id="只读的单向传递" tabindex="-1"><a class="header-anchor" href="#只读的单向传递"><span>只读的单向传递</span></a></h4><h4 id="可变更的双向传递" tabindex="-1"><a class="header-anchor" href="#可变更的双向传递"><span>可变更的双向传递</span></a></h4>',13),r=[t];function h(i,c){return s(),e("div",null,r)}const o=a(l,[["render",h],["__file","09-第九节——ArkTs的状态管理.html.vue"]]),p=JSON.parse('{"path":"/ArkTS/09-%E7%AC%AC%E4%B9%9D%E8%8A%82%E2%80%94%E2%80%94ArkTs%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、概念","slug":"一、概念","link":"#一、概念","children":[]},{"level":2,"title":"二、如何定义状态","slug":"二、如何定义状态","link":"#二、如何定义状态","children":[{"level":3,"title":"根据状态变量的影响范围对装饰器进行分类","slug":"根据状态变量的影响范围对装饰器进行分类","link":"#根据状态变量的影响范围对装饰器进行分类","children":[]},{"level":3,"title":"从数据的传递形式和同步类型层面进行分类：","slug":"从数据的传递形式和同步类型层面进行分类","link":"#从数据的传递形式和同步类型层面进行分类","children":[]}]}],"git":{"updatedTime":1719764287000,"contributors":[{"name":"etsuyou","email":"etsuyou.shuu@gmail.com","commits":2}]},"filePathRelative":"ArkTS/09-第九节——ArkTs的状态管理.md"}');export{o as comp,p as data};
