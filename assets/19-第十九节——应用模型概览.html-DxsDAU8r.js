import{_ as l,c as e,o as a,a as i}from"./app-b3hqaW6p.js";const n={},t=i('<h2 id="一、模型构成要素" tabindex="-1"><a class="header-anchor" href="#一、模型构成要素"><span>一、模型构成要素</span></a></h2><p>应用模型是HarmonyOS为开发者提供的应用程序所需能力的抽象提炼，它提供了应用程序必备的组件和运行机制。有了应用模型，开发者可以基于一套统一的模型进行应用开发，使应用开发更简单、高效。 HarmonyOS应用模型的构成要素包括：</p><h3 id="应用组件" tabindex="-1"><a class="header-anchor" href="#应用组件"><span>应用组件</span></a></h3><p><strong>应用组件：</strong></p><ol><li>应用的基本组成单位，是应用的运行入口。</li><li>在用户启动、使用和退出应用过程中，应用组件会在不同的状态间切换。</li><li>提供生命周期的回调函数，用于感知应用状态变化。</li></ol><p><strong>生命周期回调：</strong></p><ol><li>应用开发者需编写应用组件的生命周期回调函数。</li><li>生命周期回调函数在应用的不同状态触发。</li><li>通过生命周期回调，开发者能够执行特定的代码以适应应用状态的变化。</li></ol><p><strong>应用开发流程：</strong></p><ol><li>编写应用组件，是应用的入口。</li><li>编写应用组件的生命周期回调函数。</li><li>在应用配置文件中配置相关信息，包括生命周期回调的绑定。</li><li>操作系统在运行期间通过配置文件创建应用组件实例。</li><li>操作系统调度应用组件的生命周期回调函数，执行开发者的代码</li></ol><h3 id="应用进程模型" tabindex="-1"><a class="header-anchor" href="#应用进程模型"><span>应用进程模型</span></a></h3><p>应用进程模型定义应用进程的创建和销毁方式，以及进程间的通信方式。</p><h3 id="应用线程模型" tabindex="-1"><a class="header-anchor" href="#应用线程模型"><span>应用线程模型</span></a></h3><p>应用线程模型定义应用进程内线程的创建和销毁方式、主线程和UI线程的创建方式、线程间的通信方式。</p><h3 id="应用任务管理模型" tabindex="-1"><a class="header-anchor" href="#应用任务管理模型"><span>应用任务管理模型</span></a></h3><p>应用任务管理模型定义任务（Mission）的创建和销毁方式，以及任务与组件间的关系。HarmonyOS应用任务管理由系统应用负责，三方应用无需关注，下文不做具体介绍。</p><h3 id="应用配置文件" tabindex="-1"><a class="header-anchor" href="#应用配置文件"><span>应用配置文件</span></a></h3><p>应用配置文件中包含应用配置信息、应用组件信息、权限信息、开发者自定义信息等，这些信息在编译构建、分发和运行阶段分别提供给编译工具、应用市场和操作系统使用。</p><h2 id="二、应用模型解读" tabindex="-1"><a class="header-anchor" href="#二、应用模型解读"><span>二、应用模型解读</span></a></h2><h3 id="harmonyos应用模型概况" tabindex="-1"><a class="header-anchor" href="#harmonyos应用模型概况"><span>HarmonyOS应用模型概况</span></a></h3><ul><li>FA（Feature Ability）模型：HarmonyOS早期版本开始支持的模型，已经不再主推。</li><li>Stage模型：HarmonyOS 3.1 Developer Preview版本开始新增的模型，是目前主推且会长期演进的模型。在该模型中，由于提供了AbilityStage、WindowStage等类作为应用组件和Window窗口的“舞台”，因此称这种应用模型为Stage模型。</li></ul><p>Stage模型之所以成为主推模型，源于其设计思想。Stage模型的设计基于如下出发点。</p><ol><li><strong>为复杂应用而设计</strong><ul><li>多个应用组件共享同一个ArkTS引擎（运行ArkTS语言的虚拟机）实例，应用组件之间可以方便的共享对象和状态，同时减少复杂应用运行对内存的占用。</li><li>采用面向对象的开发方式，使得复杂应用代码可读性高、易维护性好、可扩展性强。</li></ul></li><li><strong>支持多设备和多窗口形态</strong>应用组件管理和窗口管理在架构层面解耦： <ul><li>便于系统对应用组件进行裁剪（无屏设备可裁剪窗口）。</li><li>便于系统扩展窗口形态。</li><li>在多设备（如桌面设备和移动设备）上，应用组件可使用同一套生命周期。</li></ul></li><li><strong>平衡应用能力和系统管控成本</strong>Stage模型重新定义应用能力的边界，平衡应用能力和系统管控成本。 <ul><li>提供特定场景（如卡片、输入法）的应用组件，以便满足更多的使用场景。</li><li>规范化后台进程管理：为保障用户体验，Stage模型对后台应用进程进行了有序治理，应用程序不能随意驻留在后台，同时应用后台行为受到严格管理，防止恶意应用行为</li></ul></li></ol><h3 id="通过对比认识fa模型与stage模型" tabindex="-1"><a class="header-anchor" href="#通过对比认识fa模型与stage模型"><span>通过对比认识FA模型与Stage模型</span></a></h3><p><strong>Stage模型与FA模型最大的区别在于</strong>：Stage模型中，多个应用组件共享同一个ArkTS引擎实例；而FA模型中，每个应用组件独享一个ArkTS引擎实例。因此在Stage模型中，应用组件之间可以方便的共享对象和状态，同时减少复杂应用运行对内存的占用。Stage模型作为主推的应用模型，开发者通过它能够更加便利地开发出分布式场景下的复杂应用</p>',24),s=[t];function r(o,h){return a(),e("div",null,s)}const d=l(n,[["render",r],["__file","19-第十九节——应用模型概览.html.vue"]]),p=JSON.parse('{"path":"/Beginner/19-%E7%AC%AC%E5%8D%81%E4%B9%9D%E8%8A%82%E2%80%94%E2%80%94%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%A7%88.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、模型构成要素","slug":"一、模型构成要素","link":"#一、模型构成要素","children":[{"level":3,"title":"应用组件","slug":"应用组件","link":"#应用组件","children":[]},{"level":3,"title":"应用进程模型","slug":"应用进程模型","link":"#应用进程模型","children":[]},{"level":3,"title":"应用线程模型","slug":"应用线程模型","link":"#应用线程模型","children":[]},{"level":3,"title":"应用任务管理模型","slug":"应用任务管理模型","link":"#应用任务管理模型","children":[]},{"level":3,"title":"应用配置文件","slug":"应用配置文件","link":"#应用配置文件","children":[]}]},{"level":2,"title":"二、应用模型解读","slug":"二、应用模型解读","link":"#二、应用模型解读","children":[{"level":3,"title":"HarmonyOS应用模型概况","slug":"harmonyos应用模型概况","link":"#harmonyos应用模型概况","children":[]},{"level":3,"title":"通过对比认识FA模型与Stage模型","slug":"通过对比认识fa模型与stage模型","link":"#通过对比认识fa模型与stage模型","children":[]}]}],"git":{"updatedTime":1719764287000,"contributors":[{"name":"etsuyou","email":"etsuyou.shuu@gmail.com","commits":2}]},"filePathRelative":"Beginner/19-第十九节——应用模型概览.md"}');export{d as comp,p as data};
