import{_ as n,c as s,o as a,d as t}from"./app-CZ3kukTv.js";const e={},p=t(`<blockquote><p>方舟开发框架（简称ArkUI）为HarmonyOS应用的UI开发提供了完整的基础设施，包括简洁的UI语法、丰富的UI功能（组件、布局、动画以及交互事件），以及实时界面预览工具等，可以支持开发者进行可视化界面开发</p></blockquote><h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p>UI：即用户界面。开发者可以将应用的用户界面设计为多个功能页面，每个页面进行单独的文件管理，并通过页面路由API完成页面间的调度管理如跳转、回退等操作，以实现应用内的功能解耦。 组件：UI构建与显示的最小单位，如列表、网格、按钮、单选框、进度条、文本等。开发者通过多种组件的组合，构建出满足自身应用诉求的完整界面</p><h2 id="二、两种开发范式" tabindex="-1"><a class="header-anchor" href="#二、两种开发范式"><span>二、两种开发范式</span></a></h2><p>针对不同的应用场景及技术背景，方舟开发框架提供了两种开发范式，分别是基于ArkTS的声明式开发范式（简称“声明式开发范式”）和兼容JS的类Web开发范式（简称“类Web开发范式”）。</p><h3 id="声明式开发范式-推荐" tabindex="-1"><a class="header-anchor" href="#声明式开发范式-推荐"><span>声明式开发范式（推荐）</span></a></h3><ul><li>基于TypeScript的声明式UI语法扩展，提供了更强大的类型检查和代码提示功能。</li><li>从组件、动画和状态管理三个维度提供UI绘制能力，使开发者可以更加专注于业务逻辑的实现。</li><li>适用于需要快速迭代和构建复杂界面的应用场景</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 使用ArkTS声明一个按钮组件  </span></span>
<span class="line">@Component  </span>
<span class="line">struct HelloButton <span class="token punctuation">{</span>  </span>
<span class="line">  @State message<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;Hello, ArkTS!&#39;</span>  </span>
<span class="line">  </span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;Click me&#39;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">          <span class="token function">Toast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类web开发范式-不推荐使用" tabindex="-1"><a class="header-anchor" href="#类web开发范式-不推荐使用"><span>类Web开发范式（不推荐使用）</span></a></h3><ul><li>采用经典的HML、CSS、JavaScript三段式开发方式，符合Web前端开发者的使用习惯。</li><li>便于快速将已有的Web应用改造成方舟开发框架应用，降低学习成本和技术门槛。</li><li>适用于需要兼容Web前端技术和快速迁移的应用场景</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myButton<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageText<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myButton&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;messageText&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;Hello, HarmonyOS!&#39;</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么推荐使用声明式开发范式" tabindex="-1"><a class="header-anchor" href="#为什么推荐使用声明式开发范式"><span>为什么推荐使用声明式开发范式</span></a></h3><h4 id="开发效率" tabindex="-1"><a class="header-anchor" href="#开发效率"><span>开发效率</span></a></h4><p>声明式开发允许开发者以更直观和自然的方式描述UI的结构和行为。这种范式使开发者专注于描述“需要什么”，而不是“如何去做”。它减少了大量的命令式代码，这些代码通常用于处理UI的状态、更新和交互。因此，声明式开发通常更加简洁和高效。</p><h4 id="应用性能" tabindex="-1"><a class="header-anchor" href="#应用性能"><span>应用性能</span></a></h4><p>与传统的类Web开发相比，声明式开发范式减少了不必要的中间层，如JS框架的DOM管理。这意味着更少的资源占用和更高效的渲染。声明式UI框架可以直接与后端引擎进行通信，优化渲染路径，从而减少内存使用和提高性能。</p><h4 id="发展趋势" tabindex="-1"><a class="header-anchor" href="#发展趋势"><span>发展趋势</span></a></h4><p>随着技术的不断进步，声明式开发范式正在成为主流。许多主流的框架和库，如React、Vue和Angular，都采用或正在转向这种范式。这意味着采用声明式开发可以使您的应用更容易与当前的技术趋势和未来的发展保持同步</p>`,19),l=[p];function c(i,o){return a(),s("div",null,l)}const r=n(e,[["render",c],["__file","01-第一节——方舟开发框架（ArkUI）概述.html.vue"]]),d=JSON.parse('{"path":"/Beginner/01-%E7%AC%AC%E4%B8%80%E8%8A%82%E2%80%94%E2%80%94%E6%96%B9%E8%88%9F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%EF%BC%88ArkUI%EF%BC%89%E6%A6%82%E8%BF%B0.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、概念","slug":"一、概念","link":"#一、概念","children":[]},{"level":2,"title":"二、两种开发范式","slug":"二、两种开发范式","link":"#二、两种开发范式","children":[{"level":3,"title":"声明式开发范式（推荐）","slug":"声明式开发范式-推荐","link":"#声明式开发范式-推荐","children":[]},{"level":3,"title":"类Web开发范式（不推荐使用）","slug":"类web开发范式-不推荐使用","link":"#类web开发范式-不推荐使用","children":[]},{"level":3,"title":"为什么推荐使用声明式开发范式","slug":"为什么推荐使用声明式开发范式","link":"#为什么推荐使用声明式开发范式","children":[]}]}],"git":{},"filePathRelative":"Beginner/01-第一节——方舟开发框架（ArkUI）概述.md"}');export{r as comp,d as data};
