import{_ as n,c as s,o as a,a as e}from"./app-CQZJYgvz.js";const p={},t=e(`<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p>HarmonyOS应用中每个进程都会有一个主线程，主线程有如下职责：</p><ol><li>执行UI绘制；</li><li>管理主线程的ArkTS引擎实例，使多个UIAbility组件能够运行在其之上；</li><li>管理其他线程（例如Worker线程）的ArkTS引擎实例，例如启动和终止其他线程；</li><li>分发交互事件；</li><li>处理应用代码的回调，包括事件处理和生命周期管理；</li><li>接收Worker线程发送的消息；</li></ol><p>除主线程外，还有一类与主线程并行的独立线程Worker，主要用于执行耗时操作，但不可以直接操作UI。Worker线程在主线程中创建，与主线程相互独立。最多可以创建8个Worker 基于HarmonyOS的线程模型，不同的业务功能运行在不同的线程上，业务功能的交互就需要线程间通信。线程间通信目前主要有Emitter和Worker两种方式，其中Emitter主要适用于线程间的事件同步， Worker主要用于新开一个线程执行耗时任务。</p><h2 id="二、emitter" tabindex="-1"><a class="header-anchor" href="#二、emitter"><span>二、Emitter</span></a></h2><p>Emitter主要提供线程间发送和处理事件的能力，包括对持续订阅事件或单次订阅事件的处理、取消订阅事件、发送事件到事件队列等。</p><h3 id="订阅事件" tabindex="-1"><a class="header-anchor" href="#订阅事件"><span>订阅事件</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> emitter <span class="token keyword">from</span> <span class="token string">&quot;@ohos.events.emitter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义一个eventId为1的事件</span></span>
<span class="line"><span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    eventId<span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 收到eventId为1的事件后执行该回调</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>eventData<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;event callback&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 订阅eventId为1的事件</span></span>
<span class="line">emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送事件" tabindex="-1"><a class="header-anchor" href="#发送事件"><span>发送事件</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> emitter <span class="token keyword">from</span> <span class="token string">&quot;@ohos.events.emitter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义一个eventId为1的事件，事件优先级为Low</span></span>
<span class="line"><span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    eventId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    priority<span class="token operator">:</span> emitter<span class="token punctuation">.</span>EventPriority<span class="token punctuation">.</span><span class="token constant">LOW</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> eventData <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;isEmpty&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 发送eventId为1的事件，事件内容为eventData</span></span>
<span class="line">emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> eventData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、使用worker进行线程间通信" tabindex="-1"><a class="header-anchor" href="#三、使用worker进行线程间通信"><span>三、使用Worker进行线程间通信</span></a></h2><p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-worker-0000001427902752-V3" target="_blank" rel="noopener noreferrer">Worker</a>是与主线程并行的独立线程。创建Worker的线程被称为宿主线程，Worker工作的线程被称为Worker线程。创建Worker时传入的脚本文件在Worker线程中执行，通常在Worker线程中处理耗时的操作，需要注意的是，Worker中不能直接更新Page。</p><h3 id="在工程的模块级build-profile-json5文件的buildoption属性中添加配置信息" tabindex="-1"><a class="header-anchor" href="#在工程的模块级build-profile-json5文件的buildoption属性中添加配置信息"><span>在工程的<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ohos-building-configuration-0000001218440654#section6887184182020" target="_blank" rel="noopener noreferrer">模块级build-profile.json5</a>文件的buildOption属性中添加配置信息</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;apiType&quot;</span><span class="token operator">:</span> <span class="token string">&#39;stageMode&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;buildOption&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;sourceOption&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;workers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;./src/main/ets/workers/worker.ts&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&quot;runtimeOS&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HarmonyOS&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ohosTest&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="根据build-profile-json5中的配置创建对应的worker-ts文件" tabindex="-1"><a class="header-anchor" href="#根据build-profile-json5中的配置创建对应的worker-ts文件"><span>根据build-profile.json5中的配置创建对应的worker.ts文件</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> worker <span class="token keyword">from</span> <span class="token string">&#39;@ohos.worker&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> parent <span class="token operator">=</span> worker<span class="token punctuation">.</span>workerPort<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 处理来自主线程的消息</span></span>
<span class="line">parent<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;onmessage: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 发送消息到主线程</span></span>
<span class="line">  parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;message from worker thread.&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主线程中使用如下方式初始化和使用worker。" tabindex="-1"><a class="header-anchor" href="#主线程中使用如下方式初始化和使用worker。"><span>主线程中使用如下方式初始化和使用worker。</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> worker <span class="token keyword">from</span> <span class="token string">&#39;@ohos.worker&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> wk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">worker</span><span class="token punctuation">.</span><span class="token function">ThreadWorker</span><span class="token punctuation">(</span><span class="token string">&quot;entry/ets/workers/worker.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 发送消息到worker线程</span></span>
<span class="line">wk<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;message from main thread.&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 处理来自worker线程的消息</span></span>
<span class="line">wk<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;message from worker: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 根据业务按需停止worker线程</span></span>
<span class="line">    wk<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),l=[t];function i(o,c){return a(),s("div",null,l)}const u=n(p,[["render",i],["__file","22-第二十二节——线程模型.html.vue"]]),d=JSON.parse('{"path":"/Beginner/22-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E8%8A%82%E2%80%94%E2%80%94%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、概念","slug":"一、概念","link":"#一、概念","children":[]},{"level":2,"title":"二、Emitter","slug":"二、emitter","link":"#二、emitter","children":[{"level":3,"title":"订阅事件","slug":"订阅事件","link":"#订阅事件","children":[]},{"level":3,"title":"发送事件","slug":"发送事件","link":"#发送事件","children":[]}]},{"level":2,"title":"三、使用Worker进行线程间通信","slug":"三、使用worker进行线程间通信","link":"#三、使用worker进行线程间通信","children":[{"level":3,"title":"在工程的模块级build-profile.json5文件的buildOption属性中添加配置信息","slug":"在工程的模块级build-profile-json5文件的buildoption属性中添加配置信息","link":"#在工程的模块级build-profile-json5文件的buildoption属性中添加配置信息","children":[]},{"level":3,"title":"根据build-profile.json5中的配置创建对应的worker.ts文件","slug":"根据build-profile-json5中的配置创建对应的worker-ts文件","link":"#根据build-profile-json5中的配置创建对应的worker-ts文件","children":[]},{"level":3,"title":"主线程中使用如下方式初始化和使用worker。","slug":"主线程中使用如下方式初始化和使用worker。","link":"#主线程中使用如下方式初始化和使用worker。","children":[]}]}],"git":{"updatedTime":1719385700000,"contributors":[{"name":"etsuyou","email":"etsuyou.shuu@gmail.com","commits":1}]},"filePathRelative":"Beginner/22-第二十二节——线程模型.md"}');export{u as comp,d as data};
