import{_ as n,c as s,o as a,a as t}from"./app-G_LJPxZj.js";const p={},e=t(`<blockquote><p>后续创建对象的方式统一为new class的形式，程序员的对象都是new来的😄</p></blockquote><h2 id="一、使用class创建对象" tabindex="-1"><a class="header-anchor" href="#一、使用class创建对象"><span>一、使用class创建对象</span></a></h2><h3 id="使用class重构第七节内容" tabindex="-1"><a class="header-anchor" href="#使用class重构第七节内容"><span>使用class重构第七节内容</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 数组里每个对象</span>
<span class="line"> * 并把当前的对象逻辑也放进去</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TaskItem</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 定义当前类里的状态</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * new的时候接收的参数</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> completed</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">getTaskStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 已完成</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 未完成</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> status</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct TaskITemComponent <span class="token punctuation">{</span></span>
<span class="line">  item<span class="token operator">:</span> TaskItem</span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">查看</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的状态</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">getTaskStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct TaskList2 <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 我们再去创建的时候就需要new一个对象进行初始化</span></span>
<span class="line">  <span class="token keyword">private</span> tasks<span class="token operator">:</span> TaskItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务1&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务2&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务3&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tasks<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">TaskITemComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、概念" tabindex="-1"><a class="header-anchor" href="#二、概念"><span>二、概念</span></a></h2><p>之前的那些装饰器仅能观察到第一层的变化，但是在实际应用开发中，应用会根据开发需要，封装自己的数据模型。对于多层嵌套的情况，比如二维数组，或者数组项class，或者class的属性是class，他们的第二层的属性变化是无法观察到的。这就引出了@Observed/@ObjectLink装饰器。 ObjectLink和@Observed类装饰器用于在涉及嵌套对象或数组的场景中进行双向数据同步：</p><ul><li>被@Observed装饰的类，可以被观察到属性的变化；</li><li>子组件中@ObjectLink装饰器装饰的状态变量用于接收@Observed装饰的类的实例，和父组件中对应的状态变量建立双向数据绑定。这个实例可以是数组中的被@Observed装饰的项，或者是class object中的属性，这个属性同样也需要被@Observed装饰。</li><li>单独使用@Observed是没有任何作用的，需要搭配@ObjectLink或者@Prop使用</li></ul><h2 id="三、注意" tabindex="-1"><a class="header-anchor" href="#三、注意"><span>三、注意</span></a></h2><ul><li>使用@Observed装饰class会改变class原始的原型链，尽量不要让@Observed和其他类装饰器装饰同一个class</li><li>装饰<strong>class</strong>。需要放在class的定义前，使用new创建类对象。</li><li>ObjectLink装饰的变量不能被赋值，如果要使用赋值操作，请使用<a href="https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V2/arkts-prop-0000001473537702-V2" target="_blank" rel="noopener noreferrer">@Prop</a><ul><li>@Prop装饰的变量和数据源的关系是是单向同步，@Prop装饰的变量在本地拷贝了数据源，所以它允许本地更改，如果父组件中的数据源有更新，@Prop装饰的变量本地的修改将被覆盖；</li><li>@ObjectLink装饰的变量和数据源的关系是双向同步，@ObjectLink装饰的变量相当于指向数据源的指针。如果一旦发生@ObjectLink装饰的变量的赋值，则同步链将被打断</li></ul></li></ul><h2 id="四、装饰器说明" tabindex="-1"><a class="header-anchor" href="#四、装饰器说明"><span>四、装饰器说明</span></a></h2><table><thead><tr><th><strong>@Observed类装饰器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>装饰器参数</td><td>无</td></tr><tr><td>类装饰器</td><td>装饰class。需要放在class的定义前，使用new创建类对象。</td></tr></tbody></table><table><thead><tr><th><strong>@ObjectLink变量装饰器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>装饰器参数</td><td>无</td></tr><tr><td>同步类型</td><td>不与父组件中的任何类型同步变量。</td></tr><tr><td>允许装饰的变量类型</td><td>必须为被@Observed装饰的class实例，必须指定类型。</td></tr><tr><td>不支持简单类型，可以使用@Prop。</td><td></td></tr><tr><td>@ObjectLink的属性是可以改变的，但是变量的分配是不允许的，也就是说这个装饰器装饰变量是只读的，不能被改变。</td><td></td></tr><tr><td>被装饰变量的初始值</td><td>不允许。</td></tr></tbody></table><h2 id="五、变量的传递-访问规则说明" tabindex="-1"><a class="header-anchor" href="#五、变量的传递-访问规则说明"><span>五、变量的传递/访问规则说明</span></a></h2><table><thead><tr><th><strong>@ObjectLink传递/访问</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>从父组件初始化</td><td>必须指定。</td></tr><tr><td>初始化@ObjectLink装饰的变量必须同时满足以下场景：</td><td></td></tr></tbody></table><ul><li>类型必须是@Observed装饰的class。</li><li>初始化的数值需要是数组项，或者class的属性。</li><li>同步源的class或者数组必须是@State，@Link，@Provide，@Consume或者@ObjectLink装饰的数据。</li></ul><p>同步源是数组项的示例请参考<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/arkts-observed-and-objectlink-0000001473697338-V2#section99561777591" target="_blank" rel="noopener noreferrer">对象数组</a>。初始化的class的示例请参考<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/arkts-observed-and-objectlink-0000001473697338-V2#section614118685518" target="_blank" rel="noopener noreferrer">嵌套对象</a>。 | | 与源对象同步 | 双向。 | | 可以初始化子组件 | 允许，可用于初始化常规变量、@State、@Link、@Prop、@Provide |</p><h2 id="六、使用" tabindex="-1"><a class="header-anchor" href="#六、使用"><span>六、使用</span></a></h2><blockquote><p>使用@Observed 重构第七节内容，并把当前状态显示到页面上，点击任务名页面可以看到相关变化</p></blockquote><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 数组里每个对象</span>
<span class="line"> * 并把当前的对象逻辑也放进去</span>
<span class="line"> */</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Observed</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TaskItem</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 定义当前类里的状态</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * new的时候接收的参数</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> completed</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">getTaskStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 已完成</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 未完成</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> status</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct TaskITemComponent <span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * 接收的参数回合原对象进行双向绑定</span>
<span class="line">   * 并且只能接受@Observed装饰的对象</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectLink</span></span> item<span class="token operator">:</span> TaskItem</span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// Button(\`查看\${this.item.name}的状态\`).onClick(() =&gt; this.item.getTaskStatus())</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">getTaskStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">getTaskStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct TaskList2 <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * 我们再去创建的时候就需要new一个对象进行初始化</span>
<span class="line">   * 注意：当前的tasks对象不具备响应式</span>
<span class="line">   * 但是内部的对象具备</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">private</span> tasks<span class="token operator">:</span> TaskItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 当前添加按钮无效</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;添加一个&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">&#39;任务4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tasks<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 这传的时候只能传@Observed 装饰的对象</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token function">TaskITemComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),l=[e];function c(o,i){return a(),s("div",null,l)}const k=n(p,[["render",c],["__file","17-第十七节——@Observed_@ObjectLink嵌套类对象属性变化.html.vue"]]),r=JSON.parse('{"path":"/ArkTS/17-%E7%AC%AC%E5%8D%81%E4%B8%83%E8%8A%82%E2%80%94%E2%80%94@Observed_@ObjectLink%E5%B5%8C%E5%A5%97%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%8F%98%E5%8C%96.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、使用class创建对象","slug":"一、使用class创建对象","link":"#一、使用class创建对象","children":[{"level":3,"title":"使用class重构第七节内容","slug":"使用class重构第七节内容","link":"#使用class重构第七节内容","children":[]}]},{"level":2,"title":"二、概念","slug":"二、概念","link":"#二、概念","children":[]},{"level":2,"title":"三、注意","slug":"三、注意","link":"#三、注意","children":[]},{"level":2,"title":"四、装饰器说明","slug":"四、装饰器说明","link":"#四、装饰器说明","children":[]},{"level":2,"title":"五、变量的传递/访问规则说明","slug":"五、变量的传递-访问规则说明","link":"#五、变量的传递-访问规则说明","children":[]},{"level":2,"title":"六、使用","slug":"六、使用","link":"#六、使用","children":[]}],"git":{"updatedTime":1719764287000,"contributors":[{"name":"etsuyou","email":"etsuyou.shuu@gmail.com","commits":2}]},"filePathRelative":"ArkTS/17-第十七节——@Observed+@ObjectLink嵌套类对象属性变化.md"}');export{k as comp,r as data};
