import{_ as n,c as s,o as a,a as e}from"./app-CQZJYgvz.js";const p={},l=e(`<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p>@Provide和@Consume，应用于与后代组件的双向数据同步，应用于状态数据在多个层级之间传递的场景。不同于上文提到的父子组件之间通过命名参数机制传递，@Provide和@Consume摆脱参数传递机制的束缚，实现跨层级传递。 其中@Provide装饰的变量是在祖先节点中，可以理解为被“提供”给后代的状态变量。@Consume装饰的变量是在后代组件中，去“消费（绑定）”祖先节点提供的变量。</p><h2 id="二、注意" tabindex="-1"><a class="header-anchor" href="#二、注意"><span>二、注意</span></a></h2><ul><li>@Provide和@Consume可以通过相同的变量名或者相同的变量别名绑定，变量类型必须相同。</li><li>不允许在同一个自定义组件内，包括其子组件中声明多个同名或者同别名的@Provide装饰的变量。</li><li>仅支持Object、class、string、number、boolean、enum类型，以及这些类型的数组。</li><li>不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null。</li><li>必须指定类型。@Provide变量的@Consume变量的类型必须相同</li><li>嵌套对象内部不具备响应式</li></ul><h2 id="三、使用" tabindex="-1"><a class="header-anchor" href="#三、使用"><span>三、使用</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct ComponentB <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * 使用 name属性接收 父级组件下发的数据</span>
<span class="line">   * 并且修改后可以父级也会对应修改</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Consume</span></span> name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;修改name为李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;B组件---&#39;</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct ComponentA <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;A组件&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">ComponentB</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct LearnProvider <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * 对所有子级组件下发一个</span>
<span class="line">   * name属性</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;父级组件--&#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">ComponentA</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、渲染流程" tabindex="-1"><a class="header-anchor" href="#四、渲染流程"><span>四、渲染流程</span></a></h2><h3 id="初始渲染" tabindex="-1"><a class="header-anchor" href="#初始渲染"><span>初始渲染</span></a></h3><p>@Provide装饰的变量会以map的形式，传递给当前@Provide所属组件的所有子组件； 子组件中如果使用@Consume变量，则会在map中查找是否有该变量名/alias（别名）对应的@Provide的变量，如果查找不到，框架会抛出JS ERROR; 在初始化@Consume变量时，和@State/@Link的流程类似，@Consume变量会保存在map中查找到的@Provide变量，并把自己注册给@Provide。</p><h3 id="当-provide装饰的数据变化时" tabindex="-1"><a class="header-anchor" href="#当-provide装饰的数据变化时"><span>当@Provide装饰的数据变化时</span></a></h3><p>通过初始渲染的步骤可知，子组件@Consume已把自己注册给父组件。父组件@Provide变量变更后，会遍历更新所有依赖它的系统组件（elementid）和状态变量（@Consume）； 通知@Consume更新后，子组件所有依赖@Consume的系统组件（elementId）都会被通知更新。以此实现@Provide对@Consume状态数据同步。</p><h3 id="当-consume装饰的数据变化时" tabindex="-1"><a class="header-anchor" href="#当-consume装饰的数据变化时"><span>当@Consume装饰的数据变化时</span></a></h3><p>通过初始渲染的步骤可知，子组件@Consume持有@Provide的实例。在@Consume更新后调用@Provide的更新方法，将更新的数值同步回@Provide，以此实现@Consume向@Provide的同步更新。</p>`,13),i=[l];function t(c,o){return a(),s("div",null,i)}const d=n(p,[["render",t],["__file","16-第十六节——@Provide和@Consume后代组件双向同步.html.vue"]]),r=JSON.parse('{"path":"/ArkTS/16-%E7%AC%AC%E5%8D%81%E5%85%AD%E8%8A%82%E2%80%94%E2%80%94@Provide%E5%92%8C@Consume%E5%90%8E%E4%BB%A3%E7%BB%84%E4%BB%B6%E5%8F%8C%E5%90%91%E5%90%8C%E6%AD%A5.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、概念","slug":"一、概念","link":"#一、概念","children":[]},{"level":2,"title":"二、注意","slug":"二、注意","link":"#二、注意","children":[]},{"level":2,"title":"三、使用","slug":"三、使用","link":"#三、使用","children":[]},{"level":2,"title":"四、渲染流程","slug":"四、渲染流程","link":"#四、渲染流程","children":[{"level":3,"title":"初始渲染","slug":"初始渲染","link":"#初始渲染","children":[]},{"level":3,"title":"当@Provide装饰的数据变化时","slug":"当-provide装饰的数据变化时","link":"#当-provide装饰的数据变化时","children":[]},{"level":3,"title":"当@Consume装饰的数据变化时","slug":"当-consume装饰的数据变化时","link":"#当-consume装饰的数据变化时","children":[]}]}],"git":{"updatedTime":1719385700000,"contributors":[{"name":"etsuyou","email":"etsuyou.shuu@gmail.com","commits":1}]},"filePathRelative":"ArkTS/16-第十六节——@Provide和@Consume后代组件双向同步.md"}');export{d as comp,r as data};
