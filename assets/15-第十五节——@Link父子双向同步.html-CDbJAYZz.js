import{_ as n,c as s,o as a,a as e}from"./app-BgCKDSPR.js";const l={},i=e(`<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p>子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。</p><h2 id="二、注意" tabindex="-1"><a class="header-anchor" href="#二、注意"><span>二、注意</span></a></h2><ol><li>当装饰的数据类型为boolean、string、number类型时，可以同步观察到数值的变化，如果是对象或者数组则只能观察到第一层修改的变化。</li><li>类型必须被指定，且和双向绑定状态变量的类型相同</li><li>不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null。不支持Length、ResourceStr、ResourceColor类型，Length、ResourceStr、ResourceColor为简单类型和复杂类型的联合类型</li><li>不允许初始化，装饰后为必传参数</li><li>传值的时候需要加上$</li><li>只能从父组件中@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp装饰变量初始化子组件</li></ol><p>�</p><h2 id="三、使用" tabindex="-1"><a class="header-anchor" href="#三、使用"><span>三、使用</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct LinkComponent <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * 接收一个name参数</span>
<span class="line">   * 该参数 会和 父组件传入的状态进行双向绑定</span>
<span class="line">   *</span>
<span class="line">   * 双向绑定也就是 无论数据哪一方发生变化，数据最终都会同步这个变化</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Link</span></span> name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token comment">// @Link age: number</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;修改为李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span></span>
<span class="line">struct LearnLink <span class="token punctuation">{</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">TextInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token function">LinkComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 给子组件传入name属性</span>
<span class="line">         * 注意:必须添加$</span>
<span class="line">         */</span></span>
<span class="line">        name<span class="token operator">:</span> $name<span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 不能直接传数值</span>
<span class="line">         * 需要传入响应式数据</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token comment">// age:18</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、更新" tabindex="-1"><a class="header-anchor" href="#四、更新"><span>四、更新</span></a></h2><h3 id="初始渲染" tabindex="-1"><a class="header-anchor" href="#初始渲染"><span>初始渲染</span></a></h3><p>执行父组件的build()函数后将创建子组件的新实例。初始化过程如下： 必须指定父组件中的@State变量，用于初始化子组件的@Link变量。子组件的@Link变量值与其父组件的数据源变量保持同步（双向数据同步）。 父组件的@State状态变量包装类通过构造函数传给子组件，子组件的@Link包装类拿到父组件的@State的状态变量后，将当前@Link包装类this指针注册给父组件的@State变量。</p><h3 id="link的数据源的更新" tabindex="-1"><a class="header-anchor" href="#link的数据源的更新"><span>@Link的数据源的更新</span></a></h3><p>即父组件中状态变量更新，引起相关子组件的@Link的更新。处理步骤： 通过初始渲染的步骤可知，子组件@Link包装类把当前this指针注册给父组件。父组件@State变量变更后，会遍历更新所有依赖它的系统组件（elementid）和状态变量（比如@Link包装类）。 通知@Link包装类更新后，子组件中所有依赖@Link状态变量的系统组件（elementId）都会被通知更新。以此实现父组件对子组件的状态数据同步。</p><h3 id="link的更新" tabindex="-1"><a class="header-anchor" href="#link的更新"><span>@Link的更新</span></a></h3><p>当子组件中@Link更新后，处理步骤如下（以父组件为@State为例）：</p><h3 id="link更新后" tabindex="-1"><a class="header-anchor" href="#link更新后"><span>@Link更新后</span></a></h3><p>调用父组件的@State包装类的set方法，将更新后的数值同步回父组件。 子组件@Link和父组件@State分别遍历依赖的系统组件，进行对应的UI的更新。以此实现子组件@Link同步回父组件@State</p>`,16),p=[i];function t(c,o){return a(),s("div",null,p)}const r=n(l,[["render",t],["__file","15-第十五节——@Link父子双向同步.html.vue"]]),d=JSON.parse('{"path":"/ArkTS/15-%E7%AC%AC%E5%8D%81%E4%BA%94%E8%8A%82%E2%80%94%E2%80%94@Link%E7%88%B6%E5%AD%90%E5%8F%8C%E5%90%91%E5%90%8C%E6%AD%A5.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、概念","slug":"一、概念","link":"#一、概念","children":[]},{"level":2,"title":"二、注意","slug":"二、注意","link":"#二、注意","children":[]},{"level":2,"title":"三、使用","slug":"三、使用","link":"#三、使用","children":[]},{"level":2,"title":"四、更新","slug":"四、更新","link":"#四、更新","children":[{"level":3,"title":"初始渲染","slug":"初始渲染","link":"#初始渲染","children":[]},{"level":3,"title":"@Link的数据源的更新","slug":"link的数据源的更新","link":"#link的数据源的更新","children":[]},{"level":3,"title":"@Link的更新","slug":"link的更新","link":"#link的更新","children":[]},{"level":3,"title":"@Link更新后","slug":"link更新后","link":"#link更新后","children":[]}]}],"git":{"updatedTime":1719385700000,"contributors":[{"name":"etsuyou","email":"etsuyou.shuu@gmail.com","commits":1}]},"filePathRelative":"ArkTS/15-第十五节——@Link父子双向同步.md"}');export{r as comp,d as data};
